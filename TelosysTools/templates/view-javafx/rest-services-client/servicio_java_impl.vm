#set($uncapitalizedEntityName = $fn.uncapitalize(${entity.name}) )
#set($toLowerCaseEntityName = $fn.toLowerCase(${entity.name}) )
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

import java.util.List;
import javax.ws.rs.core.MediaType;
import ${ROOT_PKG}.modelo.${entity.name};
import ${ROOT_PKG}.servicios.I${entity.name}Servicio;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;

public class ${entity.name}Servicio extends Services<${entity.name}> implements I${entity.name}Servicio {	
		
	@Override
	public String insert(${entity.name} ${uncapitalizedEntityName}) throws Exception {		
		client = Client.create();
		webResource = client.resource(USER_URI + "${toLowerCaseEntityName}/insert");		
		String stringJson = mapper.writeValueAsString(${uncapitalizedEntityName});
		response = webResource
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.type(MediaType.APPLICATION_JSON_TYPE)					
				.post(ClientResponse.class, stringJson);
		
		if (response.getStatus() != 200) {
			throw new Exception("Failed : HTTP error code : "
			     + response.getStatus());
		}		
		
		return response.getEntity(String.class);
	}
	
	@Override
	public String update(${entity.name} ${uncapitalizedEntityName}) throws Exception {	
		client = Client.create();
		webResource = client.resource(USER_URI + "${toLowerCaseEntityName}/update");		
		String stringJson = mapper.writeValueAsString(${uncapitalizedEntityName});
		response = webResource
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.type(MediaType.APPLICATION_JSON_TYPE)					
				.post(ClientResponse.class, stringJson);
		
		if (response.getStatus() != 200) {
			throw new Exception("Failed : HTTP error code : "
			     + response.getStatus());
		}		
		
		return response.getEntity(String.class);
	}
	
	@Override
	public String delete(${entity.name} ${uncapitalizedEntityName}) throws Exception {		
		client = Client.create();
		webResource = client.resource(USER_URI + "${toLowerCaseEntityName}/delete");		
		String stringJson = mapper.writeValueAsString(${uncapitalizedEntityName});
		response = webResource
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.type(MediaType.APPLICATION_JSON_TYPE)					
				.post(ClientResponse.class, stringJson);
		
		if (response.getStatus() != 200) {
			throw new Exception("Failed : HTTP error code : "
			     + response.getStatus());
		}		
		
		return response.getEntity(String.class);
	}
	
	@Override
	public ${entity.name} load(${entity.name} ${uncapitalizedEntityName}) throws Exception {		
		client = Client.create();
		webResource = client.resource(USER_URI + "${toLowerCaseEntityName}/load");		
		String stringJson = mapper.writeValueAsString(${uncapitalizedEntityName});
		response = webResource
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.type(MediaType.APPLICATION_JSON_TYPE)					
				.post(ClientResponse.class, stringJson);
		
		if (response.getStatus() != 200) {
			throw new Exception("Failed : HTTP error code : "
			     + response.getStatus());
		}				
		
		return this.buildJsonToObject(response.getEntity(String.class));
	}
	
	@Override
	public List<${entity.name}> loadAll() throws Exception {		
		client = Client.create();
		webResource = client.resource(USER_URI + "${toLowerCaseEntityName}/loadall");		
		
		response = webResource
				.queryParam("usuario", "leonel")
				.queryParam("clave", "123")
				.type(MediaType.APPLICATION_JSON_TYPE)					
				.post(ClientResponse.class);
		
		if (response.getStatus() != 200) {
			throw new Exception("Failed : HTTP error code : "
			     + response.getStatus());
		}				
		
		return this.buildJsonToObjectArray(response.getEntity(String.class));
	}
}